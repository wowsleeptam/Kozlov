#include "timer.hpp"
#include <deque>
#include <array>
#include <list>
#include <forward_list>
#include <utility>
#include <string>


int main(){
  Timer timer;
  // Размер всех контейнеров равен 361
  int const count = 361;

  std::vector<int> vector = {7,5,47,5,1,3,3,4,5,412,47,357,3,4785769,6784,678,456,745,68,467,45,674,57,222,12,413,46345,8,4568,75,41534,51,346356,736,5123,4135,12,34,1235,345,63,73,45,234,523,452,345,23,24,574,7696,78,567,4,8967,84,7546,7,9687874,56,79,87,6,56,89,987,65,678,9556,762,46735,685,78,45,6234,5,12,4,345,247,679,756,3,56,345,234,535,68,67890,565,623,524,6589,57687,234,51,78,9978,65,43,45,6767,786,2324,134,657,769,567,634,2456,56,73,456,246,765,780,95,6737,46,2457,4679,587,9465,73,456,3,457,476956,705,69,456,735,6243,253,42,346,457,567,46976,83,7456,2345,213,46,247,456,89578,689,758984,567,345,547,67,96,780,9658,735,73,562,3463,568,5780,789,576,8356,7345,72,6435,34,23,23,4624,8,4679,50486,45,72,4562,54,12,35,7,5,47,5,1,3,3,4,5,412,47,357,3,4785769,6784,678,456,745,68,467,45,674,57,222,12,413,46345,8,4568,75,41534,51,346356,736,5123,4135,12,34,1235,345,63,73,45,234,523,452,345,23,24,574,7696,78,567,4,8967,84,7546,7,9687874,56,79,87,6,56,89,987,65,678,9556,762,46735,685,78,45,6234,5,12,4,345,247,679,756,3,56,345,234,535,68,67890,565,623,524,6589,57687,234,51,78,9978,65,43,45,6767,786,2324,134,657,769,567,634,2456,56,73,456,246,765,780,95,6737,46,2457,4679,587,9465,73,456,3,457,476956,705,69,456,735,6243,253,42,346,457,567,46976,83,7456,2345,213,46,247,456,89578,689,758984,567,345,547,67,96,780,9658,735,73,562,3463,568,5780,789,576,8356,7345,72,6435,34,23,23,4624,8,4679,50486,45,72,4562,54,12};
  std::deque<int> deque = {7,5,47,5,1,3,3,4,5,412,47,357,3,4785769,6784,678,456,745,68,467,45,674,57,222,12,413,46345,8,4568,75,41534,51,346356,736,5123,4135,12,34,1235,345,63,73,45,234,523,452,345,23,24,574,7696,78,567,4,8967,84,7546,7,9687874,56,79,87,6,56,89,987,65,678,9556,762,46735,685,78,45,6234,5,12,4,345,247,679,756,3,56,345,234,535,68,67890,565,623,524,6589,57687,234,51,78,9978,65,43,45,6767,786,2324,134,657,769,567,634,2456,56,73,456,246,765,780,95,6737,46,2457,4679,587,9465,73,456,3,457,476956,705,69,456,735,6243,253,42,346,457,567,46976,83,7456,2345,213,46,247,456,89578,689,758984,567,345,547,67,96,780,9658,735,73,562,3463,568,5780,789,576,8356,7345,72,6435,34,23,23,4624,8,4679,50486,45,72,4562,54,12,35,7,5,47,5,1,3,3,4,5,412,47,357,3,4785769,6784,678,456,745,68,467,45,674,57,222,12,413,46345,8,4568,75,41534,51,346356,736,5123,4135,12,34,1235,345,63,73,45,234,523,452,345,23,24,574,7696,78,567,4,8967,84,7546,7,9687874,56,79,87,6,56,89,987,65,678,9556,762,46735,685,78,45,6234,5,12,4,345,247,679,756,3,56,345,234,535,68,67890,565,623,524,6589,57687,234,51,78,9978,65,43,45,6767,786,2324,134,657,769,567,634,2456,56,73,456,246,765,780,95,6737,46,2457,4679,587,9465,73,456,3,457,476956,705,69,456,735,6243,253,42,346,457,567,46976,83,7456,2345,213,46,247,456,89578,689,758984,567,345,547,67,96,780,9658,735,73,562,3463,568,5780,789,576,8356,7345,72,6435,34,23,23,4624,8,4679,50486,45,72,4562,54,12};
  std::array<int, count> array = {7,5,47,5,1,3,3,4,5,412,47,357,3,4785769,6784,678,456,745,68,467,45,674,57,222,12,413,46345,8,4568,75,41534,51,346356,736,5123,4135,12,34,1235,345,63,73,45,234,523,452,345,23,24,574,7696,78,567,4,8967,84,7546,7,9687874,56,79,87,6,56,89,987,65,678,9556,762,46735,685,78,45,6234,5,12,4,345,247,679,756,3,56,345,234,535,68,67890,565,623,524,6589,57687,234,51,78,9978,65,43,45,6767,786,2324,134,657,769,567,634,2456,56,73,456,246,765,780,95,6737,46,2457,4679,587,9465,73,456,3,457,476956,705,69,456,735,6243,253,42,346,457,567,46976,83,7456,2345,213,46,247,456,89578,689,758984,567,345,547,67,96,780,9658,735,73,562,3463,568,5780,789,576,8356,7345,72,6435,34,23,23,4624,8,4679,50486,45,72,4562,54,12,35,7,5,47,5,1,3,3,4,5,412,47,357,3,4785769,6784,678,456,745,68,467,45,674,57,222,12,413,46345,8,4568,75,41534,51,346356,736,5123,4135,12,34,1235,345,63,73,45,234,523,452,345,23,24,574,7696,78,567,4,8967,84,7546,7,9687874,56,79,87,6,56,89,987,65,678,9556,762,46735,685,78,45,6234,5,12,4,345,247,679,756,3,56,345,234,535,68,67890,565,623,524,6589,57687,234,51,78,9978,65,43,45,6767,786,2324,134,657,769,567,634,2456,56,73,456,246,765,780,95,6737,46,2457,4679,587,9465,73,456,3,457,476956,705,69,456,735,6243,253,42,346,457,567,46976,83,7456,2345,213,46,247,456,89578,689,758984,567,345,547,67,96,780,9658,735,73,562,3463,568,5780,789,576,8356,7345,72,6435,34,23,23,4624,8,4679,50486,45,72,4562,54,12};
  std::list<int> list = {7,5,47,5,1,3,3,4,5,412,47,357,3,4785769,6784,678,456,745,68,467,45,674,57,222,12,413,46345,8,4568,75,41534,51,346356,736,5123,4135,12,34,1235,345,63,73,45,234,523,452,345,23,24,574,7696,78,567,4,8967,84,7546,7,9687874,56,79,87,6,56,89,987,65,678,9556,762,46735,685,78,45,6234,5,12,4,345,247,679,756,3,56,345,234,535,68,67890,565,623,524,6589,57687,234,51,78,9978,65,43,45,6767,786,2324,134,657,769,567,634,2456,56,73,456,246,765,780,95,6737,46,2457,4679,587,9465,73,456,3,457,476956,705,69,456,735,6243,253,42,346,457,567,46976,83,7456,2345,213,46,247,456,89578,689,758984,567,345,547,67,96,780,9658,735,73,562,3463,568,5780,789,576,8356,7345,72,6435,34,23,23,4624,8,4679,50486,45,72,4562,54,12,35,7,5,47,5,1,3,3,4,5,412,47,357,3,4785769,6784,678,456,745,68,467,45,674,57,222,12,413,46345,8,4568,75,41534,51,346356,736,5123,4135,12,34,1235,345,63,73,45,234,523,452,345,23,24,574,7696,78,567,4,8967,84,7546,7,9687874,56,79,87,6,56,89,987,65,678,9556,762,46735,685,78,45,6234,5,12,4,345,247,679,756,3,56,345,234,535,68,67890,565,623,524,6589,57687,234,51,78,9978,65,43,45,6767,786,2324,134,657,769,567,634,2456,56,73,456,246,765,780,95,6737,46,2457,4679,587,9465,73,456,3,457,476956,705,69,456,735,6243,253,42,346,457,567,46976,83,7456,2345,213,46,247,456,89578,689,758984,567,345,547,67,96,780,9658,735,73,562,3463,568,5780,789,576,8356,7345,72,6435,34,23,23,4624,8,4679,50486,45,72,4562,54,12};
  std::forward_list<int> forward_list = {7,5,47,5,1,3,3,4,5,412,47,357,3,4785769,6784,678,456,745,68,467,45,674,57,222,12,413,46345,8,4568,75,41534,51,346356,736,5123,4135,12,34,1235,345,63,73,45,234,5283,452,345,23,24,574,7696,78,567,4,8967,84,7546,7,9687874,56,79,87,6,56,89,987,65,678,9556,762,46735,685,78,45,6234,5,12,4,345,247,679,756,3,56,345,234,535,68,67890,565,623,524,6589,57687,234,51,78,9978,65,43,45,6767,786,2324,134,657,769,567,634,2456,56,73,456,246,765,780,95,6737,46,2457,4679,587,9465,73,456,3,457,476956,705,69,456,735,6243,253,42,346,457,567,46976,83,7456,2345,213,46,247,456,89578,689,758984,567,345,547,67,96,780,9658,735,73,562,3463,568,5780,789,576,8356,7345,72,6435,34,23,23,4624,8,4679,50486,45,72,4562,54,12,35,7,5,47,5,1,3,3,4,5,412,47,357,3,4785769,6784,678,456,745,68,467,45,674,57,222,12,413,46345,8,4568,75,41534,51,346356,736,5123,4135,12,34,1235,345,63,73,45,234,523,452,345,23,24,574,7696,78,567,4,8967,84,7546,7,9687874,56,79,87,6,56,89,987,65,678,9556,762,46735,685,78,45,6234,5,12,4,345,247,679,756,3,56,345,234,535,68,67890,565,623,524,6589,57687,234,51,78,9978,65,43,45,6767,786,2324,134,657,769,567,634,2456,56,73,456,246,765,780,95,6737,46,2457,4679,587,9465,73,456,3,457,476956,705,69,456,735,6243,253,42,346,457,567,46976,83,7456,2345,213,46,247,456,89578,689,758984,567,345,547,67,96,780,9658,735,73,562,3463,568,5780,789,576,8356,7345,72,6435,34,23,23,4624,8,4679,50486,45,72,4562,54,12};

// Здесь будут храниться вектор из пар (промежуток, название контейнера)
  std::vector<std::pair<long long int,std::string>> dur;

// Здесь засекаю каждую сортировку и добавляю время + контейнер в вектор
  timer.start();
  std::sort(vector.begin(), vector.end());
  std::cout << "Sort of vector with std::sort = " << timer.elapsed(Period::microsec);
  dur.push_back(std::pair<long long int, std::string>(timer.elapsed(Period::microsec), "Vector"));

  timer.restart();
  std::sort(deque.begin(), deque.end());
  std::cout << "\nSort of deque with std::sort = " <<timer.elapsed(Period::microsec);
  dur.push_back(std::pair<long long int, std::string>(timer.elapsed(Period::microsec), "Deque"));

  timer.restart();
  std::sort(array.begin(), array.end());
  std::cout << "\nSort of array with std::sort = " <<timer.elapsed(Period::microsec);
  dur.push_back(std::pair<long long int, std::string>(timer.elapsed(Period::microsec), "Array"));



  std::cout << "\nList and forward_list unable to sort with std::sort";



  timer.restart();
  list.sort();
  std::cout << "\nSort of list with private sort = " <<timer.elapsed(Period::microsec);
  dur.push_back(std::pair<long long int, std::string>(timer.elapsed(Period::microsec), "List"));


  timer.restart();
  forward_list.sort();
  std::cout << "\nSort of forward_list  with private sort = " <<timer.elapsed(Period::microsec);
  dur.push_back(std::pair<long long int, std::string>(timer.elapsed(Period::microsec), "Forward_list"));

// Сортрую список, чтобы получится рейтинг
  std::sort(dur.begin(), dur.end());
  std::cout << "\n\nTop of time-consuming sort\n";
  for (size_t i = 0; i < dur.size(); i++) {
    std::cout << dur.at(i).first << " - "<< dur.at(i).second  <<std::endl;
  }













  // timer.restart();
  // std::sort(list.begin(), list.end());
  // std::cout << "\nSort of list with STL = " <<timer.elapsed(Period::microsec);
  // dur.push_back(timer.elapsed(Period::microsec));
  //
  // timer.restart();
  // std::sort(forward_list.begin(), forward_list.end());
  // std::cout << "\nSort of array with STL = " <<timer.elapsed(Period::microsec);
  // dur.push_back(timer.elapsed(Period::microsec));

}


// 7,5,47,5,1,3,3,4,5,412,47,357,3,4785769,6784,678,456,745,68,467,45,674,57,222,12,413,46345,8,4568,75,41534,51,346356,736,5123,4135,12,34,1235,345,63,73,45,234,523,452,345,23,24,574,7696,78,567,4,8967,84,7546,7,9687874,56,79,87,6,56,89,987,65,678,9556,762,46735,685,78,45,6234,5,12,4,345,247,679,756,3,56,345,234,535,68,67890,565,623,524,6589,57687,234,51,78,9978,65,43,45,6767,786,2324,134,657,769,567,634,2456,56,73,456,246,765,780,95,6737,46,2457,4679,587,9465,73,456,3,457,476956,705,69,456,735,6243,253,42,346,457,567,46976,83,7456,2345,213,46,247,456,89578,689,758984,567,345,547,67,96,780,9658,735,73,562,3463,568,5780,789,576,8356,7345,72,6435,34,23,23,4624,8,4679,50486,45,72,4562,54,12,35,7,5,47,5,1,3,3,4,5,412,47,357,3,4785769,6784,678,456,745,68,467,45,674,57,222,12,413,46345,8,4568,75,41534,51,346356,736,5123,4135,12,34,1235,345,63,73,45,234,523,452,345,23,24,574,7696,78,567,4,8967,84,7546,7,9687874,56,79,87,6,56,89,987,65,678,9556,762,46735,685,78,45,6234,5,12,4,345,247,679,756,3,56,345,234,535,68,67890,565,623,524,6589,57687,234,51,78,9978,65,43,45,6767,786,2324,134,657,769,567,634,2456,56,73,456,246,765,780,95,6737,46,2457,4679,587,9465,73,456,3,457,476956,705,69,456,735,6243,253,42,346,457,567,46976,83,7456,2345,213,46,247,456,89578,689,758984,567,345,547,67,96,780,9658,735,73,562,3463,568,5780,789,576,8356,7345,72,6435,34,23,23,4624,8,4679,50486,45,72,4562,54,12
